#! /usr/bin/env python
import pathlib
import argparse
import re
from util import random_string


def read_env(slug: str) -> dict[str, str]:
    env_path = pathlib.Path("/usr/local/src/") / slug / ".env"
    res = {}
    for line in env_path.open():
        line = line.strip()
        if line.startswith("#"):
            continue
        if line.startswith("export "):
            line = line[7:]
        key, value = line.split("=", 1)
        res[key] = value
    return res


if __name__ == "__main__":
    DESC = "Update keys / passwords in .env file"
    parser = argparse.ArgumentParser(description=DESC)
    parser.add_argument("slug", help="Slug of the project to update")
    parser.add_argument(
        "--settings",
        help="The name of the settings module to use. Default: production",
        default="production",
    )
    args = parser.parse_args()
    env_vars = read_env(args.slug)
    # Update the settings module
    if "DJANGO_SETTINGS_MODULE" in env_vars:
        old_settings = env_vars["DJANGO_SETTINGS_MODULE"]
        env_vars["DJANGO_SETTINGS_MODULE"] = re.sub(
            r"\.\w+$", f".{args.settings}", old_settings
        )
    else:
        print("Could not find DJANGO_SETTINGS_MODULE in .env file. Value not updated")

    # Update the secret key
    if "DJANGO_SECRET_KEY" in env_vars:
        env_vars["DJANGO_SECRET_KEY"] = random_string(128, charset="alphanum")
    else:
        print("Could not find key DJANGO_SECRET_KEY in .env file. Value not updated")

    # Update the database password
    if "DB_PW" in env_vars:
        env_vars["DB_PW"] = random_string(32, charset="alphanum")
    else:
        print("Could not find DB_PW in .env file. Value not updated")

    NEW_ENV_FILE = "\n".join([f"{key}={value}" for key, value in env_vars.items()])
    env_file = pathlib.Path("/usr/local/src/") / args.slug / ".env"
    env_file.write_text(NEW_ENV_FILE)
    print("wrote new .env file")
    print(NEW_ENV_FILE)
