#! /usr/bin/env python
import pathlib
import argparse
import re
from util import random_string

def read_env(slug: str) -> dict[str, str]:
  env_file = pathlib.Path("/usr/local/src/") / slug / ".env"
  env_vars = {}
  for line in env_file.open():
    line = line.strip()
    if line.startswith("#"):
      continue
    if line.startswith("export "):
      line = line[7:]
    key, value = line.split("=", 1)
    env_vars[key] = value
  return env_vars

if __name__ == "__main__":
  desc = "Update keys / passwords in .env file"
  parser = argparse.ArgumentParser(description=desc)
  parser.add_argument("slug", help="Slug of the project to update")
  parser.add_argument("--settings", 
                      help="The name of the settings module to use. Default: production", 
                      default="production")
  args = parser.parse_args()
  vars = read_env(args.slug)
  # Update the settings module
  if "DJANGO_SETTINGS_MODULE" in vars:
    old_settings = vars["DJANGO_SETTINGS_MODULE"]
    vars["DJANGO_SETTINGS_MODULE"] = re.sub(r"\.\w+$", f".{args.settings}", old_settings)
  else:
    print("Could not find DJANGO_SETTINGS_MODULE in .env file. Value not updated")
  
  # Update the secret key
  if "DJANGO_SECRET_KEY" in vars:
    vars["DJANGO_SECRET_KEY"] = random_string(128, charset="alphanum")
  else:
    print("Could not find key DJANGO_SECRET_KEY in .env file. Value not updated")
  
  # Update the database password
  if "DB_PW" in vars:
    vars["DB_PW"] = random_string(32, charset="alphanum")
  else: 
    print("Could not find DB_PW in .env file. Value not updated")
    
  new_env_file = "\n".join([f"{key}={value}" for key, value in vars.items()])
  env_file = pathlib.Path("/usr/local/src/") / args.slug / ".env"
  env_file.write_text(new_env_file)
  print("wrote new .env file")
  print(new_env_file)